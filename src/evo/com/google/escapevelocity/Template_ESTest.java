/*
* This file was automatically generated by EvoSuite
* Thu Feb 27 18:13:05 GMT 2020
*/

package com.google.escapevelocity;

import com.google.common.collect.ImmutableBiMap;
import com.google.common.collect.ImmutableMap;
import com.google.escapevelocity.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Template_ESTest extends Template_ESTest_scaffolding {

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a chamada ao método parseFrom() stringReader0 finalizada lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - Tanto o comportamento do teste quanto suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test0() throws Throwable {
        // Undeclared exception!
        try {
            Template.parseFrom("", (Template.ResourceOpener) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.escapevelocity.Template", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a chamada ao método parseFrom() stringReader0 finalizada lança uma RuntimeException.
    *
    * Compreensivel: sim
    *     - Tanto o comportamento do teste quanto suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test1() throws Throwable {
        StringReader stringReader0 = new StringReader("T|edC_'[f N#g");
        // Undeclared exception!
        try {
            Template.parseFrom((Reader) stringReader0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // Unrecognized directive #g, on line 1, at text starting: EOF
            //
            verifyException("com.google.escapevelocity.Parser", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a chamada ao método parseFrom() stringReader0 finalizada lança uma IOException.
    *
    * Compreensivel: sim
    *     - Tanto o comportamento do teste quanto suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test2() throws Throwable {
        StringReader stringReader0 = new StringReader("+KMv/ Q ](lg");
        Template.parseFrom((Reader) stringReader0);
        try {
            Template.parseFrom((Reader) stringReader0);
            fail("Expecting exception: IOException");

        } catch (IOException e) {
            //
            // Stream closed
            //
            verifyException("java.io.StringReader", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a chamada ao método evaluate() stringReader0 finalizada lança uma RuntimeException.
    *
    * Compreensivel: sim
    *     - Tanto o comportamento do teste quanto suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test3() throws Throwable {
        ReferenceNode.PlainReferenceNode referenceNode_PlainReferenceNode0 = new ReferenceNode.PlainReferenceNode("com.google.escapevelocity.Template", 0, "com.google.escapevelocity.Template");
        ImmutableBiMap<String, Macro> immutableBiMap0 = ImmutableBiMap.of();
        Template template0 = new Template(referenceNode_PlainReferenceNode0, immutableBiMap0);
        // Undeclared exception!
        try {
            template0.evaluate(immutableBiMap0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // In expression on line 0 of com.google.escapevelocity.Template: Undefined reference $com.google.escapevelocity.Template
            //
            verifyException("com.google.escapevelocity.Node", e);
        }
    }


    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser compreendido.
    *
    * Compreensivel: não
    *     - O comportamento do teste não é comprreensível, já suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test4() throws Throwable {
        ReferenceNode.PlainReferenceNode referenceNode_PlainReferenceNode0 = new ReferenceNode.PlainReferenceNode((String) null, (-830), (String) null);
        ReferenceNode.MemberReferenceNode referenceNode_MemberReferenceNode0 = new ReferenceNode.MemberReferenceNode(referenceNode_PlainReferenceNode0, (String) null);
        ReferenceNode.MethodReferenceNode referenceNode_MethodReferenceNode0 = new ReferenceNode.MethodReferenceNode(referenceNode_MemberReferenceNode0, "", (List<ExpressionNode>) null);
        ReferenceNode.IndexReferenceNode referenceNode_IndexReferenceNode0 = new ReferenceNode.IndexReferenceNode(referenceNode_MethodReferenceNode0, referenceNode_MemberReferenceNode0);
        DirectiveNode.IfNode directiveNode_IfNode0 = new DirectiveNode.IfNode((String) null, (-830), referenceNode_IndexReferenceNode0, referenceNode_PlainReferenceNode0, referenceNode_MemberReferenceNode0);
        Template template0 = new Template(directiveNode_IfNode0, (ImmutableMap<String, Macro>) null);
        // Undeclared exception!
        try {
            template0.evaluate((Map<String, ?>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.TreeMap", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a chamada ao método parseFrom() lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - Tanto o comportamento do teste quanto suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test5() throws Throwable {
        Template.ResourceOpener template_ResourceOpener0 = mock(Template.ResourceOpener.class, new ViolatedAssumptionAnswer());
        doReturn((Reader) null).when(template_ResourceOpener0).openResource(anyString());
        // Undeclared exception!
        try {
            Template.parseFrom("", template_ResourceOpener0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.Reader", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a chamada ao método parseFrom() lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - Tanto o comportamento do teste quanto suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test6() throws Throwable {
        StringReader stringReader0 = new StringReader("Wrong number of arguments to #");
        Template.parseFrom((Reader) stringReader0);
        Template.ResourceOpener template_ResourceOpener0 = mock(Template.ResourceOpener.class, new ViolatedAssumptionAnswer());
        doReturn(stringReader0).when(template_ResourceOpener0).openResource(anyString());
        try {
            Template.parseFrom("p(vdd]kNZ$7R`GX|l8", template_ResourceOpener0);
            fail("Expecting exception: IOException");

        } catch (IOException e) {
            //
            // Stream closed
            //
            verifyException("java.io.StringReader", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a chamada ao método parseFrom() lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - Tanto o comportamento do teste quanto suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test7() throws Throwable {
        // Undeclared exception!
        try {
            Template.parseFrom((Reader) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.escapevelocity.Template", e);
        }
    }


    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser compreendido.
    *
    * Compreensivel: não
    *     - O comportamento do teste não é comprreensível, já suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test8() throws Throwable {
        StringReader stringReader0 = new StringReader("Wrong number of arguments to #");
        Template template0 = Template.parseFrom((Reader) stringReader0);
        TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
        String string0 = template0.evaluate(treeMap0);
        assertEquals("Wrong number of arguments to #", string0);
    }


    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser compreendido.
    *
    * Compreensivel: não
    *     - O comportamento do teste não é comprreensível, já suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test9() throws Throwable {
        StringReader stringReader0 = new StringReader("");
        Template.ResourceOpener template_ResourceOpener0 = mock(Template.ResourceOpener.class, new ViolatedAssumptionAnswer());
        doReturn(stringReader0).when(template_ResourceOpener0).openResource(anyString());
        Template template0 = Template.parseFrom("Bbe&)Ld|@RVp`CREOR", template_ResourceOpener0);
        TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
        String string0 = template0.evaluate(treeMap0);
        assertEquals("", string0);
    }
}
