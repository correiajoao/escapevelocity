/*
* This file was automatically generated by EvoSuite
* Thu Feb 27 18:45:54 GMT 2020
*/

package com.google.escapevelocity;

import com.google.common.collect.ImmutableSet;
import com.google.escapevelocity.ConstantExpressionNode;
import com.google.escapevelocity.MethodFinder;
import com.google.escapevelocity.StopNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.lang.reflect.Method;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class MethodFinder_ESTest extends MethodFinder_ESTest_scaffolding {


    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a chamada ao método publicMethodsWithName() com parâmentros inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste quanto e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test0() throws Throwable {
        MethodFinder methodFinder0 = new MethodFinder();
        // Undeclared exception!
        try {
            methodFinder0.publicMethodsWithName((Class<?>) null, "sum");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a chamada ao método publicMethodsWithName() com parâmentros inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste quanto e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test1() throws Throwable {
        MethodFinder methodFinder0 = new MethodFinder();
        Class<StopNode.ElseIfNode> class0 = StopNode.ElseIfNode.class;
        // Undeclared exception!
        try {
            methodFinder0.publicMethodsWithName(class0, (String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a tamanho do ImmutableSet é igual ao esperado.
    *
    * Compreensivel: sim
    *     - O comportamento do teste quanto e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test2() throws Throwable {
        MethodFinder methodFinder0 = new MethodFinder();
        Class<ConstantExpressionNode> class0 = ConstantExpressionNode.class;
        ImmutableSet<Method> immutableSet0 = methodFinder0.publicMethodsWithName(class0, "hashCode");
        assertEquals(1, immutableSet0.size());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     o MethodFinder inicializado com parâmetros null é igual a null.
    *
    * Compreensivel: sim
    *     - O comportamento do teste quanto e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test3() throws Throwable {
        Method method0 = MethodFinder.visibleMethod((Method) null, (Class<?>) null);
        assertNull(method0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a chamada ao método visibleMethod() com parâmentros inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste quanto e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test4() throws Throwable {
        Class<StopNode.ElseIfNode> class0 = StopNode.ElseIfNode.class;
        // Undeclared exception!
        try {
            MethodFinder.visibleMethod((Method) null, class0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.escapevelocity.MethodFinder", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a tamanho do ImmutableSet é igual ao esperado.
    *
    * Compreensivel: sim
    *     - O comportamento do teste quanto e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test5() throws Throwable {
        MethodFinder methodFinder0 = new MethodFinder();
        Class<Boolean> class0 = Boolean.class;
        ImmutableSet<Method> immutableSet0 = methodFinder0.publicMethodsWithName(class0, "getModule");
        assertEquals(0, immutableSet0.size());
    }


    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     dois ImmutableSet são iguais.
    *
    * Compreensivel: sim
    *     - O comportamento do teste quanto e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test6() throws Throwable {
        MethodFinder methodFinder0 = new MethodFinder();
        Class<ConstantExpressionNode> class0 = ConstantExpressionNode.class;
        ImmutableSet<Method> immutableSet0 = methodFinder0.publicMethodsWithName(class0, "com.google.common.collect.DenseImmutableTable$Row");
        ImmutableSet<Method> immutableSet1 = methodFinder0.publicMethodsWithName(class0, "com.google.common.collect.DenseImmutableTable$Row");
        assertSame(immutableSet1, immutableSet0);
    }
}
